name: Benchmark Comment on PR

on:
    pull_request:
        paths:
            - 'src/**'
            - '!src/**/*.test.ts'
            - '!src/**/*.spec.ts'
    issue_comment:
        types:
            - created

permissions:
    pull-requests: write

jobs:
    benchmark:
        if: |
            github.event_name == 'pull_request' ||
            (github.event.issue.pull_request && contains(github.event.comment.body, '/benchmark'))
        runs-on: ubuntu-latest
        steps:
            # /benchmark 코멘트에 리액션 추가
            - if: github.event_name == 'issue_comment'
              name: Add reaction to comment
              uses: actions/github-script@v6
              with:
                  script: |
                      await github.rest.reactions.createForIssueComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        comment_id: context.payload.comment.id,
                        content: '+1'
                      });

            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha || github.event.pull_request.head.ref }}

            - uses: pnpm/action-setup@v4

            - name: Use Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run benchmark
              run: pnpm bench

            - name: Convert benchmark results to markdown
              run: |
                  node ./scripts/benchmark-to-md.mjs benchmark-result.json ${{ github.event.pull_request.head.sha || github.sha }} > benchmark-results.md

            - name: Create PR comment
              uses: actions/github-script@v6
              with:
                  script: |
                      const fs = await import('node:fs/promises');

                      const content = await fs.readFile('benchmark-results.md', 'utf8');
                      const finalContent = content +
                        '\n\n*Last updated by [GitHub Actions](https://github.com/' +
                        process.env.GITHUB_REPOSITORY + '/actions/runs/' +
                        process.env.GITHUB_RUN_ID + ')*';

                      const prNumber = context.eventName === 'issue_comment'
                        ? context.payload.issue.number
                        : context.payload.pull_request.number;

                      const { data: comments } = await github.rest.issues.listComments({
                        ...context.repo,
                        issue_number: prNumber,
                      });

                      const existingComment = comments.find(comment =>
                        comment.body.includes('### Benchmark Results')
                      );

                      if (existingComment) {
                        await github.rest.issues.updateComment({
                          ...context.repo,
                          comment_id: existingComment.id,
                          body: finalContent,
                        });
                      } else {
                        await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: prNumber,
                          body: finalContent,
                        });
                      }
